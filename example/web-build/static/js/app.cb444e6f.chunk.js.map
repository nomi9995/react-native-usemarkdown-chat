{"version":3,"sources":["../src/index.tsx","src/App.tsx","index.js"],"names":["utf8decoder","TextDecoder","BOLD","ITELIC","UNDERLINE_SMALL","getCharArray","type","asciiCode","isSmall","concat","getOffet","convertUint8","text","convertedStr","i","length","char","charCodeAt","decode","Uint8Array","textConverter","replace","_matchString","_matchGroup","matchGrou1","underlineText","matchGroup","italicText","boldText","useMarkdown","useState","textValue","setTextValue","useCallback","txt","previewText","styles","StyleSheet","create","container","flex","alignItems","justifyContent","input","width","height","backgroundColor","fontSize","registerRootComponent","setText","View","style","TextInput","value","onChangeText"],"mappings":"+NAIMA,G,MAAc,IAAIC,aAElBC,EAAO,CAAC,IAAK,IAAK,KAClBC,EAAS,CAAC,IAAK,IAAK,KACpBC,EAAkB,CAAC,IAAK,KAExBC,EAAe,WAIf,IAHJC,EAGG,uDAHqB,IACxBC,EAEG,uCADHC,IACG,yDACH,MAAa,MAATF,EAEOJ,EAAKO,OAAOF,EAAYG,EAASJ,EAAME,IAI9B,MAATF,EAEAH,EAAOM,OAAOF,EAAYG,EAASJ,EAAME,IAO3C,CAACD,GAAWE,OAAOL,IAMxBM,EAAW,WAAoD,IAAnDJ,EAAkD,uDAA1B,IAAKE,EAAqB,uCAClE,MAAa,MAATF,EACKE,EAAU,GAAK,GACJ,MAATF,EACFE,EAAU,GAAK,GAGjB,GAGHG,EAAe,SAACC,GAEpB,IAFmE,IAAjCN,EAAgC,uDAAR,IACtDO,EAAe,GACVC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,IAAIE,EAAOJ,EAAKE,GACVP,EAAYS,EAAKC,WAAW,GAC9BV,GAAa,IAAMA,GAAa,IAElCS,EAAOhB,EAAYkB,OACjB,IAAIC,WAAWd,EAAaC,EAAMC,GAAW,KAEtCA,GAAa,IAAMA,GAAa,KAEzCS,EAAOhB,EAAYkB,OACjB,IAAIC,WAAWd,EAAaC,EAAMC,GAAW,MAIjDM,GAAgBG,EAElB,OAAOH,GA8BT,IAAMO,EAAgB,SAACR,GACrB,OAVF,SAAuBA,GACrB,OAAOA,EAAKS,QACV,iCACA,SAACC,EAAsBC,EAAqBC,GAC1C,OAAOb,EAAaa,EAAY,QAM7BC,CAnBT,SAAoBb,GAClB,OAAOA,EAAKS,QACV,eACA,SAACC,EAAsBI,GACrB,OAAOf,EAAae,EAAY,QAefC,CA5BvB,SAAkBf,GAChB,OAAOA,EAAKS,QACV,0BACA,SAACC,EAAsBI,GACrB,OAAOf,EAAae,EAAY,QAwBJE,CAAShB,MAa5BiB,EAVK,WAClB,MAAkCC,mBAAiB,IAAnD,WAAOC,EAAP,KAAkBC,EAAlB,KAOA,MAAO,CAACD,EALoBE,uBAAY,SAACC,GACvC,IAAMC,EAAcf,EAAcc,GAClCF,EAAaG,KACZ,MC1FL,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,MAAO,OACPC,OAAQ,IACRC,gBAAiB,OACjBC,SAAU,MClBdC,aDDe,WACb,MAAwBnB,IAAxB,WAAOjB,EAAP,KAAaqC,EAAb,KACA,OACE,gBAACC,EAAA,EAAD,CAAMC,MAAOf,EAAOG,WAClB,gBAACa,EAAA,EAAD,CAAWD,MAAOf,EAAOO,MAAOU,MAAOzC,EAAM0C,aAAcL,U","file":"static/js/app.cb444e6f.chunk.js","sourcesContent":["declare var TextDecoder: any;\nimport { useState, useCallback } from 'react';\n\nimport 'text-encoding-polyfill';\nconst utf8decoder = new TextDecoder();\n\nconst BOLD = [240, 157, 144];\nconst ITELIC = [240, 157, 152];\nconst UNDERLINE_SMALL = [204, 178];\n\nconst getCharArray = (\n  type: 'b' | 'i' | 'u' = 'b',\n  asciiCode: number,\n  isSmall: boolean = true\n) => {\n  if (type === 'b') {\n    if (isSmall) {\n      return BOLD.concat(asciiCode + getOffet(type, isSmall));\n    } else {\n      return BOLD.concat(asciiCode + getOffet(type, isSmall));\n    }\n  } else if (type === 'i') {\n    if (isSmall) {\n      return ITELIC.concat(asciiCode + getOffet(type, isSmall));\n    } else {\n      return ITELIC.concat(asciiCode + getOffet(type, isSmall));\n    }\n  }\n\n  if (isSmall) {\n    return [asciiCode].concat(UNDERLINE_SMALL);\n  } else {\n    return [asciiCode].concat(UNDERLINE_SMALL);\n  }\n};\n\nconst getOffet = (type: 'b' | 'i' | 'u' = 'b', isSmall: boolean) => {\n  if (type === 'b') {\n    return isSmall ? 57 : 63;\n  } else if (type === 'i') {\n    return isSmall ? 65 : 71;\n  }\n\n  return 0;\n};\n\nconst convertUint8 = (text: string, type: 'b' | 'i' | 'u' = 'b') => {\n  let convertedStr = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    const asciiCode = char.charCodeAt(0);\n    if (asciiCode >= 97 && asciiCode <= 122) {\n      //small letters\n      char = utf8decoder.decode(\n        new Uint8Array(getCharArray(type, asciiCode, true))\n      );\n    } else if (asciiCode >= 65 && asciiCode <= 90) {\n      // capital letter\n      char = utf8decoder.decode(\n        new Uint8Array(getCharArray(type, asciiCode, false))\n      );\n    }\n\n    convertedStr += char;\n  }\n  return convertedStr;\n};\n\nfunction boldText(text: string) {\n  return text.replace(\n    /\\*\\*(\\S(.*?\\S)?)\\*\\*/gm,\n    (_matchString: string, matchGroup: string) => {\n      return convertUint8(matchGroup, 'b');\n    }\n  );\n}\n\nfunction italicText(text: string) {\n  return text.replace(\n    /_([^_]+)_/gm,\n    (_matchString: string, matchGroup: string) => {\n      return convertUint8(matchGroup, 'i');\n    }\n  );\n}\n\nfunction underlineText(text: string) {\n  return text.replace(\n    /(--|—)(\\w+)(--|—)/gm,\n    (_matchString: string, _matchGroup: string, matchGrou1: string) => {\n      return convertUint8(matchGrou1, 'u');\n    }\n  );\n}\n\nconst textConverter = (text: string) => {\n  return underlineText(italicText(boldText(text)));\n};\n\nconst useMarkdown = (): [string, (data: string) => void] => {\n  const [textValue, setTextValue] = useState<string>('');\n\n  const setTextValueHandler = useCallback((txt) => {\n    const previewText = textConverter(txt);\n    setTextValue(previewText);\n  }, []);\n\n  return [textValue, setTextValueHandler];\n};\nexport default useMarkdown;\n","// import UsemarkdownChat from 'react-native-usemarkdown-chat';\nimport * as React from 'react';\n\nimport { StyleSheet, View, TextInput } from 'react-native';\nimport useMarkdown from 'react-native-usemarkdown-chat';\n\nexport default function App() {\n  const [text, setText] = useMarkdown();\n  return (\n    <View style={styles.container}>\n      <TextInput style={styles.input} value={text} onChangeText={setText} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  input: {\n    width: '100%',\n    height: 100,\n    backgroundColor: 'gray',\n    fontSize: 30,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}